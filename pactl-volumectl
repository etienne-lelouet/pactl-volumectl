#!/bin/bash


SINK=$(cat /tmp/pactl-volumectl-sink)

if [ -z ${SINK} ]; then
    SINK=$(pactl-getsink| sed -n '1p')
fi

CURVOLUME=$(pactl-getvolume)
IFS=' ' read -r -a CURVOLUMEARRAY <<< "$CURVOLUME"

SINKNAME=$(pactl-getsink $SINK)

NOTIFYIDFILE="/tmp/.notif"
SELECTEDSINKFILE="/tmp/pactl_volumectl_selectedsink"

reoperator='^+|-$'
renum='^[0-9]+$'
# remute='^m$'
# redisplaynotification="--displaynotification"

DISPLAYNOTIFICATION=false
MUTE=false
CHANGE=false
OPERATOR=""
VALUE=""
usage() {
  echo "Usage: $0 [ -d (display notification) ] -c (toggle sink) | -m (mute) | -o OPERATOR -v value" 1>&2 
}
exit_abnormal() {
  usage
  exit 1
}
while getopts "dmco:v:" options; do
    case "${options}" in
        d)
            DISPLAYNOTIFICATION=true
            ;;
        m)
            MUTE=true
            ;;
        c)
            CHANGE=true
            ;;
        o)
            OPERATOR=${OPTARG}
            if ! [ "$OPERATOR" = "+" ] && ! [ $OPERATOR = "-" ]; 
            then
                echo "Error: operator must be + or -"
                exit_abnormal
                exit 1
            fi
            ;;
        v)
            VALUE=${OPTARG}
            if ! [[ $VALUE =~ $renum ]]; 
            then
                echo "Error: value must be a number"
                exit_abnormal
            fi
            ;;
        :)
            echo "Error: -${OPTARG} requires an argument."
            exit_abnormal
            ;;
        *)
            exit_abnormal
            ;;
    esac
done

if [ "$CHANGE" = true ]; then
    newsink=$(pactl-getsink | grep -v $(cat /tmp/pactl-volumectl-sink))
    echo $newsink
    echo $newsink > /tmp/pactl-volumectl-sink
    exit 0
fi

if [ "$MUTE" = false ] && ( [ "$OPERATOR" = "" ] || [ "$VALUE" = "" ] );
then
    exit_abnormal
fi

if ! [ -f $NOTIFYIDFILE ];
then
    echo '1' | tee "$NOTIFYIDFILE"
fi

if [ "$MUTE" = true ]; then
    pactl set-sink-mute ${SINK} toggle
    MUTESTATUS=$(pactl-getvolume m)
    MUTESTATUSSTRING=""
    if [ $MUTESTATUS -eq 1 ];
    then
        MUTESTATUSSTRING="Muted"
    elif [ $MUTESTATUS -eq 0 ];
    then
        MUTESTATUSSTRING="Unmuted"
    fi
    notifid=$(cat $NOTIFYIDFILE)
    gdbus call \
        --session \
        --dest org.freedesktop.Notifications \
        --object-path /org/freedesktop/Notifications \
        --method org.freedesktop.Notifications.Notify \
        "identifier" \
        "$notifid" \
        "" \
        "Mute status of sink $SINKNAME" \
        "$MUTESTATUSSTRING" \
        "[]" \
        "{}" \
        "1500" | sed 's/[^ ]* //; s/,.//' | tee "$NOTIFYIDFILE"

else
    NEWVOLUME=$(echo "${CURVOLUMEARRAY[O]} $OPERATOR $VALUE" | bc) # for now we are acting as if the left and right channel volumes are locked 
    if [ $NEWVOLUME -gt 100 ]; then
        NEWVOLUME="100"
    fi
    if [ $NEWVOLUME -lt 0 ]; then
        NEWVOLUME="0"
    fi
    # if [[ ${1} = "+" ]]; then
    #     NEWVOLUME=$((NEWVOLUME + ${2}))
    # elif [[ ${1} = "-" ]]; then
    #     NEWVOLUME=$((NEWVOLUME - ${2}))
    # fi
    MUTESTATUS=$(pactl-getvolume m)
    if [ $MUTESTATUS -eq 1 ];
    then
        pactl set-sink-mute ${SINK} false
    fi
    pactl set-sink-volume ${SINK} ${NEWVOLUME}%
    if [[ $3 =~ $redisplaynotification ]]; then
        notifid=$(cat $NOTIFYIDFILE)
        gdbus call \
            --session \
            --dest org.freedesktop.Notifications \
            --object-path /org/freedesktop/Notifications \
            --method org.freedesktop.Notifications.Notify \
            "identifier" \
            "$notifid" \
            "" \
            "Volume of sink $SINKNAME" \
            "$NEWVOLUME%" \
            "[]" \
            "{}" \
            "1500" | sed 's/[^ ]* //; s/,.//' | tee "$NOTIFYIDFILE"
    fi
fi
